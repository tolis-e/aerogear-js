/* AeroGear JavaScript Library
* https://github.com/aerogear/aerogear-js
* JBoss, Home of Professional Open Source
* Copyright Red Hat, Inc., and individual contributors
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
    The CouchDB adapter stores data in a CouchDB database for more persistent client side storage
    This constructor is instantiated when the "DataManager.add()" method is called
    @constructs AeroGear.DataManager.adapters.CouchDB
    @status Experimental
    @param {String} storeName - the name used to reference this particular store
    @param {Object} [settings={}] - the settings to be passed to the adapter
    @param {String} [settings.recordId="_id"] - the name of the field used to uniquely identify a "record" in the data
    @param {Boolean} [settings.auto=false] - set to 'true' to enable 'auto-connect' for read/remove/save/filter
    @param {Object} [settings.crypto] - the crypto settings to be passed to the adapter
    @param {Object} [settings.crypto.agcrypto] - the AeroGear.Crypto object to be used
    @param {Object} [settings.crypto.options] - the specific options for the AeroGear.Crypto encrypt/decrypt methods
    @returns {Object} The created store
    @example
    // Create an empty DataManager
    var dm = AeroGear.DataManager();

    // Add a CouchDB store
    dm.add({
        name: "newStore",
        type: "CouchDB"
    });

 */
AeroGear.DataManager.adapters.CouchDB = function( storeName, settings ) {

    // Allow instantiation without using new
    if ( !( this instanceof AeroGear.DataManager.adapters.CouchDB ) ) {
        return new AeroGear.DataManager.adapters.CouchDB( storeName, settings );
    }

    settings = settings || {};

    AeroGear.DataManager.adapters.base.apply( this, arguments );

    // Private Instance vars
    var baseURL = settings.baseURL,
        // metadata that should not be encrypted-decrypted
        metadata = settings.metadata || [ "_id", "_rev" ];

    /**
        Returns the value of the private storeName var
        @private
        @augments CouchDB
        @returns {String}
     */
    this.getStoreName = function() {
        return storeName;
    };
    
    /**
        Returns whether crypto settings exist
        @private
        @augments CouchDB
        @returns {Boolean}
     */
    this.isCrypto = function() {
        return crypto && crypto.agcrypto;
    }

    /**
        Returns the value of the private baseURL var
        @private
        @augments CouchDB
        @returns {String}
     */
    this.getBaseURL = function() {
        return baseURL;
    };

    /**
        Returns the value of the private metadata var
        @private
        @augments CouchDB
        @returns {Array}
     */
    this.getMetadata = function() {
        return metadata;
    };

    /**
        Returns an object-doc which contains the metadata that are auto-generatd from CouchDB (_id, _rev) and must not be encrypted-decrypted. Also deletes them from the passed object-doc.
        This is needed for the proper encryption-decryption functioning since the autogenerated CouchDB metadata (_id, _rev) should not be encrypted-decrypted.
        @param {Object} [doc] - a document which contains both metadata that needs to be encrypted-decrypted and metadata that should not be encrypted-decrypted
        @param {Array} [metadata] - the metadata that should not be encrypted-decrtypted
        @private
        @augments CouchDB
        @returns {Object}
     */
    this.splitDocumentMetadata = function( doc, metadata ) {
        metadata = metadata || this.getMetadata();
        var newDoc = {},
            metadataName, index;
        if ( metadata ) {
            for ( index = 0; index < metadata.length; index++ ) {
                metadataName = metadata[ index ];
                if ( doc[ metadataName ] ) {
                    newDoc[ metadataName ] = doc[ metadataName ];
                    delete doc[metadataName];
                }
            }
        }
        return newDoc;
    };

    /**
        Sets the proper document id property equal to the recordId value;CouchDB uses _id as identifier but the recordId might be different
        @param {Object} [doc] - a document object
        @private
        @augments CouchDB
     */
    this.setDocumentId = function ( doc ) {
        if ( this.getRecordId() !== "_id" && doc[ this.getRecordId() ]) {
            doc._id = doc[ this.getRecordId() ];
        }
    };

    /**
        Returns an object - document which is a unification of plain document's metadata and encrypted or unencrypted data
        @param {Object} [splitDoc] - a document which contains unencrypted metadata
        @param {Object|Array} [cryptoData] - encrypted or decrypted data
        @private
        @augments CouchDB
        @returns {Object}
     */
    this.unifyDocumentMetadata = function( splitDoc, cryptoData ) {
        splitDoc.data = cryptoData;
        return splitDoc;
    };

};

// Public Methods

/**
    Creates a CouchDB database with name equal to the store name
    @param {Object} [options={}] - options
    @param {AeroGear~successCallbackCouchDB} [settings.success] - a callback to be called when after successful creation of CouchDB or when the database already exists
    @param {AeroGear~errorCallbackCouchDB} [settings.error] - a callback to be called when the CouchDB is not created and it does not exists
    @returns {Object} A Promise created by AeroGear.ajax
    @example
    // Create an empty DataManager
    var dm = AeroGear.DataManager();

    // Add a CouchDB store
    dm.add({
        name: "newStore",
        type: "CouchDB"
    });

    dm.stores.newStore.open({
        success: function() { ... },
        error: function() { ... }
    });
*/
AeroGear.DataManager.adapters.CouchDB.prototype.open = function( options ) {
    options = options || {};

    var that = this,
        response,

        onSuccess = function( request, status ) {
            response = request.response || {};
            // in case the database is created or it already exists, apply the success callback - if any
            if ( response.ok || response.error === 'file_exists' ) {
                if ( options.success ) {
                    options.success.call( this, response );
                }
            } else {
                onError.call( this, response, response.error || 'error' );
            }
        },

        onError = function( request, error ) {
            response = request.response || {};
            // in case the database already exists call the onSuccess function
            if ( response.error === 'file_exists') {
                onSuccess.call( this, request, 'success' );
            } else if ( options.error ) {
                options.error.call( this, response );
            }
        };

    return AeroGear.ajax({
        contentType: "application/json",
        dataType: "json",
        type: "PUT",
        // PUT request http://domain:port/databaseName attempts to create a new Couch DB with name 'databaseName'
        url: [ this.getBaseURL() || options.baseURL, '/', this.getStoreName() ].join(''),
        success: onSuccess,
        error: onError
    });
};

/**
    Read data from a store
    @param {String|Number} [id] - Usually a String or Number representing a single "record" in the data set or if no id is specified, all data is returned
    @param {Object} [options={}] - additional options
    @param {Array} [options.metadata] - an Array which contains document metadata that should not be decrypted
    @param {AeroGear~successCallbackCouchDB} [options.success] - a callback to be called after the successful reading of a CouchDB
    @param {AeroGear~errorCallbackCouchDB} [options.error] - a callback to be called when there is an error reading a CouchDB
    @returns {Object} A Promise created by AeroGear.ajax
    @example
    // Create an empty DataManager
    var dm = AeroGear.DataManager();

    // Add a CouchDB store
    dm.add({
        name: "newStore",
        type: "CouchDB"
    });

    dm.stores.newStore.open({
        success: function() { ... },
        error: function() { ... }
    });

    dm.stores.test1.read( undefined, {
        success: function( data ) { ... },
        error: function( error ) { ... }
    });

    // read a record with a particular id
    dm.stores.test1.read( 5, {
        success: function( data ) { ... },
        error: function( error ) { ... }
    });
 */
AeroGear.DataManager.adapters.CouchDB.prototype.read = function( id, options ) {
    options = options || {};

    var that = this;

    onSuccess = function( request, status ) {
        
        // in case of _all_docs only the metadata generated from CouchDB are returned (id, key, rev) - the actual document metadata are not returned
        // if is _all_docs case or crypto options do not exist, then apply the success callback without decryption since CouchDB metadata are not encrypted
        // else if id exists and crypto settings exist then unify a document which consists of unencrypted metadata generated from CouchDB (_id, _rev etc) and decrypted document's metadata
        if ( options.success ) {
            options.success.call( this, id && that.isCrypto() ? that.unifyDocumentMetadata( that.splitDocumentMetadata( request.response, options.metadata ), that.decrypt( request.response, true) ) : request.response );
        }
    },

    onError = function( request, error ) {
        if ( options.error ) {
            options.error.call( this, request.response );
        }
    };

    return AeroGear.ajax({
        contentType: "application/json",
        dataType: "json",
        type: "GET",
        url: [ this.getBaseURL() || options.baseURL, "/", this.getStoreName(), "/", id || "_all_docs" ].join(''),
        success: onSuccess,
        error: onError
    });
};

/**
    Saves data to the store, optionally clearing and resetting the data
    @param {Object|Array} data - An object or array of objects representing the data to be saved to the server. When doing an update, one of the key/value pairs in the object to update must be the `recordId` you set during creation of the store representing the unique identifier for a "record" in the data set.
    @param {Object} [options={}] - additional options
    @param {AeroGear~successCallbackCouchDB} [options.success] - a callback to be called when the bulk insert REST API operation call is successful - Note that it is not guaranteed that the documents will have been saved. In case of a bulk insert/update of many documents, some documents documents might not be updated due to conflicts; in a such case the response contains detailed information about the error and the client should check the response array about errors (e.g given an array of 4 documents with 3 inserts & 1 update where the update fails due to conflict, the response will contain an array of objects where 3 of them will have id property and one of them will have error property)
    @param {AeroGear~errorCallbackCouchDB} [options.error] - a callback to be called when there is an error with the saving of a record into a CouchDB
    @returns {Object} A Promise created by AeroGear.ajax
    @example
    // Create an empty DataManager
    var dm = AeroGear.DataManager();

    // Add a CouchB store
    dm.add({
        name: "newStore",
        type: "CouchDB"
    });

    dm.stores.newStore.open({
        success: function() { ... },
        error: function() { ... }
    });

    dm.stores.newStore.save( { "name": "Grace", "type": "Little Person" }, {
        success: function( data ) { ... },
        error: function( error ) { ... }
    });

    // Save multiple Records
    dm.stores.newStore.save(
        [
            { "name": "Grace", "type": "Little Person" },
            { "name": "Graeham", "type": "Really Little Person" }
        ],
        {
            success: function( data ) { ... },
            error: function( error ) { ... }
        }
    );
 */
AeroGear.DataManager.adapters.CouchDB.prototype.save = function( data, options ) {
    options = options || {};

    var that = this,
        isCrypto = this.isCrypto(),

        onSuccess = function( request, status ) {
            if ( options.success ) {
                options.success.call( this, request.response );
            }
        },

        onError = function( request, error ) {
            if ( options.error ) {
                options.error.call( this, request.response );
            }
        };

        data = Array.isArray( data ) ? data : [ data ];
        
        data = data.map( function( doc ) {
            // set _id equal to recordId value
            that.setDocumentId( doc );
            // if crypto then encrypt the appropriate document properties else leave document as is
            return isCrypto ? that.unifyDocumentMetadata( that.splitDocumentMetadata( doc, options.metadata ), that.encrypt( doc ).data ) : doc;
        });
        
        return AeroGear.ajax({
            contentType: "application/json",
            dataType: "json",
            type: "POST",
            data: JSON.stringify( { docs: dataIsArray ? data : [ data ] } ),
            url: [ that.getBaseURL() || options.baseURL, "/", that.getStoreName(), "/", "_bulk_docs" ].join(''),
            success: onSuccess,
            error: onError
        });
};

/**
    Determine if this adapter is supported in the current environment
*/
AeroGear.DataManager.adapters.CouchDB.isValid = function() {
    return true;
};
